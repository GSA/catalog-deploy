---
- name: Install build dependencies
  apt: name={{ packages }} state=present
  vars:
    packages:
      - memcached
      - swig
      - xmlsec1
      - cron
      - supervisor
  notify: restart apache2

- name: ensure supervisor is started and enabled
  service: name=supervisor state=started enabled=yes

- name: Create log directory
  file: path={{ inventory_log_dir }} state=directory owner=root group=www-data mode=0750

- name: Remove old rollback code
  file: path="{{ project_source_rollback_path }}" state=absent

- name: Check whether new code dir exists
  stat: path="{{ project_source_new_code_path }}"
  register: p

- name: Create rollback code
  command: "mv {{ project_source_new_code_path }} {{ project_source_rollback_path }}"
  when: p.stat.isdir is defined and p.stat.isdir

- name: Symlink current dir with rollback code
  file:
    src: "{{ project_source_rollback_path }}"
    path: "{{ current_source_symlink }}"
    state: link
  when: p.stat.isdir is defined and p.stat.isdir

- name: Remove new code
  file: path="{{ project_source_new_code_path }}" state=absent

- name: Clone Inventory app
  git:
    force: yes
    umask: "0022"
    repo: '{{ inventory_app_repo }}'
    dest: '{{ inventory_app_source_path }}'
    version: '{{ inventory_app_repo_branch }}'

- name: setup virtualenv for new deployment
  pip:
    name:
      - pip>=19.3.0
      - setuptools>=44.0.0,<45.0.0  # setuptools 45+ requires python 3.5, keep pinned below, but still modern version
    virtualenv: '{{ project_source_new_code_path }}'
    virtualenv_python: "{{ inventory_ckan_python_home }}/bin/python"
    umask: "0022"
  notify: restart apache2

#- name: setup virtualenv for new deployment
#  shell: umask 0022 && virtualenv -p "{{ inventory_ckan_python_home }}/bin/python" "{{ project_source_new_code_path }}"
#  args:
#    creates: "{{ project_source_new_code_path }}"
#
#- name: after vitualenv is setup, upgrade pip
#  shell: umask 0022 && {{ project_source_new_code_path }}/bin/pip install -U pip
#  tags:
#    - skip_ansible_lint

- name: install inventory app from requirements
  pip:
    requirements: "{{ inventory_app_source_path }}/requirements-freeze.txt"
    virtualenv: '{{ project_source_new_code_path }}'
    virtualenv_python: "{{ inventory_ckan_python_home }}/bin/python"
    umask: "0022"
  notify: restart apache2

- name: Remove old datapusher code
  file: path="{{ datapusher_virtual_env }}" state=absent
  tags:
    - datapusher

- include_tasks: build-pkgs.yml
  vars:
    pkg: "{{ datapusher_pkgs }}"
    virtualenv: "{{ datapusher_virtual_env }}"
  tags:
    - datapusher

- name: create directories
  action: file path={{ item }} state=directory owner="www-data" group="www-data" mode=0755
  with_items:
    - /var/lib/ckan

- name: copy all needed files
  action: copy src={{ item }} dest=/{{ item }} owner=root group=www-data mode=0640
  with_items:
    - etc/ckan/who.ini
  notify: restart apache2

- name: Configure production.ini
  template: src={{ item }} dest=/{{ item }} owner=root group=www-data mode=0640
  with_items:
    - etc/ckan/production.ini
    - etc/ckan/datapusher.wsgi
    - etc/ckan/datapusher_settings.py
    - etc/apache2/sites-enabled/ckan.conf
    - etc/apache2/sites-enabled/datapusher.conf
    - etc/supervisor/conf.d/gunicorn-web-app.conf
  notify: restart apache2

- include_tasks: additional-tasks.yml
  vars:
    virtualenv: "{{ project_source_new_code_path }}"

- name: fix virtualenv permissions
  file: path={{ item }} state=directory group=www-data recurse=yes
  with_items:
    - "{{ datapusher_virtual_env }}"
    - "{{ project_source_new_code_path }}"

- name: Symlink current dir with new code
  file:
    src: "{{ project_source_new_code_path }}"
    path: "{{ current_source_symlink }}"
    state: link
  notify: restart apache2

- name: point site_url in /etc/hosts to localhost
  action: lineinfile dest=/etc/hosts line="127.0.0.1 {{ ckan_site_domain | regex_replace('https?\://','') }}" state=absent
  tags:
    - molecule-notest # Device or resource busy ranaming temp file

- name: Ensure apache2 is started and enabled
  service: name=apache2 enabled={{ datagov_in_service | ternary('true', 'false') }} state={{ datagov_in_service | ternary('started', 'stopped') }}
